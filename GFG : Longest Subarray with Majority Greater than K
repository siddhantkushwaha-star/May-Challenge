GFG : Longest Subarray with Majority Greater than K


Given an array arr[] and an integer k, the task is to find the length of longest subarray in which the count of elements greater than k is more than the count of elements less than or equal to k.

Examples:

Input: arr[] = [1, 2, 3, 4, 1], k = 2
Output: 3
Explanation: The subarray [2, 3, 4] or [3, 4, 1] satisfy the given condition, and there is no subarray of length 4 or 5 which will hold the given condition, so the answer is 3.
Input: arr[] = [6, 5, 3, 4], k = 2
Output: 4
Explanation: In the subarray [6, 5, 3, 4], there are 4 elements > 2 and 0 elements <= 2, so it is the longest subarray.
Constraints:
1 <= arr.size() <= 106
1 <= arr[i] <= 106
0 <= k <= 106

Solution  : 


class Solution {
    static int longestSubarray(int[] arr, int k) {
        // Code Here
         int n = arr.length;
        int[] transformed = new int[n];

        // Step 1: Transform the array
        for (int i = 0; i < n; i++) {
            transformed[i] = (arr[i] > k) ? 1 : -1;
        }

        // Step 2: Prefix sum logic with map
        Map<Integer, Integer> firstIndexMap = new HashMap<>();
        int prefixSum = 0, maxLen = 0;

        for (int i = 0; i < n; i++) {
            prefixSum += transformed[i];

            // If sum is positive from start to i
            if (prefixSum > 0) {
                maxLen = i + 1;
            } else {
                // Check if (prefixSum - 1) occurred before
                if (firstIndexMap.containsKey(prefixSum - 1)) {
                    maxLen = Math.max(maxLen, i - firstIndexMap.get(prefixSum - 1));
                }
            }

            // Store first occurrence of this prefix sum
            if (!firstIndexMap.containsKey(prefixSum)) {
                firstIndexMap.put(prefixSum, i);
            }
        }

        return maxLen;
    }
}
