GFG  03 : Prime list

Prime List
Difficulty: MediumAccuracy: 53.68%Submissions: 32K+Points: 4
You are given the head of a linked list. You have to replace all the values of the nodes with the nearest prime number. If more than one prime number exists at an equal distance, choose the smallest one. Return the head of the modified linked list.

Examples :

Input: head = 2 → 6 → 10
Output: 2 → 5 → 11

Explanation: The nearest prime of 2 is 2 itself. The nearest primes of 6 are 5 and 7, since 5 is smaller so, 5 will be chosen. The nearest prime of 10 is 11.
Input: head = 1 → 15 → 20
Output: 2 → 13 → 19

Explanation: The nearest prime of 1 is 2. The nearest primes of 15 are 13 and 17, since 13 is smaller so, 13 will be chosen. The nearest prime of 20 is 19.
Constraints:
1 <= no. of Nodes <= 104
1 <= node.val <= 104

Solution : 


class Solution {
       private static final int MAX = 20000;
       private static boolean[] isPrime = new boolean[MAX + 1];
       private static List<Integer> primeList = new ArrayList<>();
       private static boolean isSieveDone = false;
    Node primeList(Node head) {
        // code here
          // Step 1: Build prime numbers if not done already
        if (!isSieveDone) {
            buildPrimes();
            isSieveDone = true;
        }

        // Step 2: Traverse the linked list and replace values
        Node curr = head;
        while (curr != null) {
            curr.val = getNearestPrime(curr.val);
            curr = curr.next;
        }

        return head;
    }

    // Sieve of Eratosthenes to precompute all primes up to MAX
    private void buildPrimes() {
        Arrays.fill(isPrime, true);
        isPrime[0] = false;
        isPrime[1] = false;

        for (int i = 2; i * i <= MAX; i++) {
            if (isPrime[i]) {
                for (int j = i * i; j <= MAX; j += i) {
                    isPrime[j] = false;
                }
            }
        }

        for (int i = 2; i <= MAX; i++) {
            if (isPrime[i]) {
                primeList.add(i);
            }
        }
    }

    // Use binary search to find the nearest prime
    private int getNearestPrime(int val) {
        if (isPrime[val]) return val;

        int left = 0, right = primeList.size() - 1;
        int nearest = -1;
        int minDiff = Integer.MAX_VALUE;

        while (left <= right) {
            int mid = (left + right) / 2;
            int prime = primeList.get(mid);
            int diff = Math.abs(prime - val);

            if (diff < minDiff || (diff == minDiff && prime < nearest)) {
                minDiff = diff;
                nearest = prime;
            }

            if (prime < val) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }

        return nearest;
    }
}
