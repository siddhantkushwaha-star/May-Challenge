Missing element of AP
Difficulty: MediumAccuracy: 34.32%Submissions: 46K+Points: 4
Given a sorted array arr[] that represents an Arithmetic Progression (AP) with exactly one missing element, find the missing number.

Note: An element will always exist that, upon inserting into a sequence forms Arithmetic progression. If the given sequence already forms a valid complete AP, return the (n+1)-th element that would come next in the sequence.

Examples:

Input: arr[] = [2, 4, 8, 10, 12, 14]
Output: 6
Explanation: Actual AP should be 2, 4, 6, 8, 10, 12, 14.
Input: arr[] = [1, 6, 11, 16, 21, 31]
Output: 26
Explanation: Actual AP should be 1, 6, 11, 16, 21, 26, 31.
Input: arr[] = [4, 7, 10, 13, 16]
Output: 19
Explanation: Since the sequence already forms a valid AP, the next element after 16 in the sequence would be 19. Therefore, the output is 19.
Constraints:
2 <= arr.size() <= 105
0 <= arr[i] <= 2*107

Solution : 

class Solution {
    public int findMissing(int[] arr) {
        
        int n = arr.length;
        
        // Calculate common difference using the minimum of first and last 3 diffs
        int diff1 = arr[1] - arr[0];
        int diff2 = arr[2] - arr[1];
        int diff3 = arr[n - 1] - arr[n - 2];
        int diff = Math.min(diff1, Math.min(diff2, diff3)); // most likely correct diff

        // Binary search for first mismatch
        int low = 0, high = n - 1;
        while (low < high) {
            int mid = (low + high) / 2;
            int expected = arr[0] + mid * diff;

            if (arr[mid] == expected) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }

        // If missing element is in array, return it
        if (low < n && arr[low] != arr[0] + low * diff) {
            return arr[0] + low * diff;
        }

        // Otherwise, array is complete â€” return the next expected number
        return arr[n - 1] + diff;
    }
}
